#!/usr/bin/lua

local ft = require('firstbootwizard.functools')
local iwinfo = require("iwinfo")
local fs = require("nixio.fs")

-- for each key in values, replace {key} with related value
function template(str, values)
    local res = str
    for key, value in pairs(values) do
        res = string.gsub(res, "{"..key.."}", value)
    end
    return res
end

function file_exists(filename)
    return fs.stat(filename, "type") == "reg"
end

function split(str, sep)
    local sep, fields = sep or ":", {}
    local pattern = string.format("([^%s]+)", sep)
    str:gsub(pattern, function(c) fields[#fields+1] = c end)
    return fields
end

function execute(cmd)
    local f = assert(io.popen(cmd, 'r'))
    local s = assert(f:read('*a'))
    f:close()
    return s
end

-- get neighbouring nodes

-- search for 802.11s and adhoc networks

function phy_to_idx(phy)
    local substr = string.gsub(phy, "phy", "")
    return tonumber(substr)
end

function get_phys()
    return split(execute("ls /sys/class/ieee80211"), "\n")
end

function get_networks(phys)
    all_networks = {}
    for idx, phy in pairs(phys) do
        networks = iwinfo.nl80211.scanlist(phy)
        for k,network in pairs(networks) do
            network["phy"] = phy
            network["phy_idx"] = phy_to_idx(phy)
            all_networks[#all_networks+1] = network
        end
    end
    return all_networks
end

-- connect to network

function chan_to_freq(chan)
    if chan < 14 then return 2412 + 5 * (chan - 1) end
    if chan == 14 then return 2482 end
    if chan < 229 and chan > 31 then
        return 5160 + 5 * (chan - 32)
    end
end

function lsplit(mlstring)
    return split(mlstring, "\n")
end

function connect_adhoc(mesh_network)
    print("connect_adhoc: "..mesh_network.channel )
    local f = io.open("/etc/config/wireless", "w")
    local command = template([[
config wifi-device 'radio{phy_idx}'
        option type 'mac80211'
        option channel '{channel}'
        option hwmode '11g'
        option path 'platform/ar933x_wmac'
        option htmode 'HT20'
        option disabled '0'
        option distance '1000'
        option noscan '1'

config wifi-iface 'lm_wlan0_adhoc_radio{phy_idx}'
        option mode 'adhoc'
        option device 'radio{phy_idx}'
        option ifname 'wlan{phy_idx}-mesh'
        option network 'lm_net_wlan{phy_idx}_adhoc'
        option mcast_rate '24000'
        option distance '1000'
        option ssid 'LiMe'
        option bssid 'ca:fe:00:c0:ff:ee'
    ]], mesh_network)
    local s = f:write(command)
    f:close()
    execute("wifi down; wifi up;")
    print("connected to:"..mesh_network.channel )
    print("wait a few seconds..")

    -- The sleep comes because it takes some time to discover the mesh nodes
    execute("sleep 4")
    print("/connect_adhoc: "..mesh_network.channel )
end

function backup_wifi_config()
    execute("cp /etc/config/wireless /tmp/wireless-temp")
end

function restore_wifi_config()
    execute("cp /tmp/wireless-temp /etc/config/wireless")
end

function connect_11s(mesh_network)
    print("connect_11s channel: "..mesh_network.channel )
    local f = io.open("/etc/config/wireless", "w")
    local command = template([[
config wifi-device 'radio{phy_idx}'
        option type 'mac80211'
        option channel '{channel}'
        option hwmode '11g'
        option path 'platform/ar933x_wmac'
        option htmode 'HT20'
        option disabled '0'
        option distance '1000'
        option noscan '1'
        option country 'US'

config wifi-iface 'lm_wlan{phy_idx}_mesh_radio{phy_idx}'
        option mode 'mesh'
        option device 'radio{phy_idx}'
        option ifname 'wlan{phy_idx}-mesh'
        option network 'lm_net_wlan{phy_idx}_mesh'
        option distance '1000'
        option mesh_fwding '0'
        option mesh_id 'LiMe'
    ]], mesh_network)
    local s = f:write(command)
    f:close()
    execute("wifi down; wifi up;")
    print("connected to:"..mesh_network.channel )
    print("wait a few seconds..")

    -- The sleep comes because it takes some time to discover the mesh nodes
    execute("sleep 4")
    print("/connect_11s: "..mesh_network.channel )
end

function connect(mesh_network)
    if mesh_network.mode == "Mesh Point" then
        connect_11s(mesh_network)
    elseif mesh_network.mode == "Ad-Hoc" then
        connect_adhoc(mesh_network)
    end
end

function get_hosts(iface)
    local cmdstr = "ping6 -n -L -c 10 -w 10 ff02::2%"..iface.." | grep \"^64 bytes\" | awk '{print $4}' | sed \"s/:$/%"..iface.."/\" | sort -u"
    print(cmdstr)
    local cmd = execute(cmdstr)
    print(cmd)
    return ft.filter(function(o) return o ~= "" end, split(cmd, "\n"))
end

function fetch_config(host)
    print("fetch_config:"..host)
    filename = "/tmp/lime-defaults-"..host
    execute("wget http://["..host.."]/lime-defaults -O "..filename.." 2>&1")
    if file_exists(filename) then
        print('file fetched: '..filename)
        return filename
    else
        print('file not fetched: '..filename)
        return nil
    end
end

function get_config(mesh_network)
    connect(mesh_network)
    hosts = get_hosts("wlan"..mesh_network["phy_idx"].."-mesh") --TODO replace mesh0 with appropiate iface
    if(#hosts > 0) then
        configs = ft.map(fetch_config, hosts)
        print("Configs fetched: "..#configs)
        -- removing nil configs
        return ft.filter(function(el) return el ~= nil end, configs)
    else
        print ( "No hosts in network in channel: "..mesh_network.channel)
        return {}
    end

end

function unpack_table(t)
    unpacked = {}
    for k,v in ipairs(t) do
        for sk, sv in ipairs(v) do
            unpacked[#unpacked+1] = sv
        end
    end
    return unpacked
end

function hash_file(file)
    return execute("md5sum "..file.." | awk '{print $1}'")
end

function are_files_different(file1, file2)
    return hash_file(file1) ~= hash_file(file2)
end

function clean_lime_config()
    local f = io.open("/etc/config/lime", "w")
    local command = [[
# Read the documentation in /docs directory
# and on http://libremesh.org

### System options

config lime system


### Network general option

config lime network


### WiFi general options

config lime wifi
    ]]
    local s = f:write(command)
    f:close()

end

function apply_config(config)
    execute("cp "..config.." /etc/config/lime-defaults")
    clean_lime_config()
    execute("/rom/etc/uci-defaults/91_lime-config")
    execute("rm /var/lock/first_run")
    execute("reboot")
end

function filter_adhoc(network)
    return network.mode=="Ad-Hoc"
end

function filter_11s(row, index)
    return row.mode=="Mesh Point"
end

function first_run()
    phys = get_phys()
    if (#phys == 0) then
        print ("no wireless cards.")
        return
    else
        print("cards found: "..#phys)
    end
    networks = get_networks(phys)
    if (#networks == 0) then
        print("no networks found.")
        return
    else
        print("networks found: "..#networks)
    end

    all_11s = ft.filter(filter_11s, networks)
    all_adhoc = ft.filter(filter_adhoc, networks)

    amount_meshes = #all_11s + #all_adhoc
    if (amount_meshes == 0) then
        print("no mesh network found.")
        return
    else
        print("mesh networks found: "..( amount_meshes ))
    end

    backup_wifi_config()

    packed_mesh_configs = ft.map(get_config, all_11s)
    all_11s_configs = unpack_table(packed_mesh_configs)

    packed_adhoc_configs = ft.map(get_config, all_adhoc)
    all_adhoc_configs = unpack_table(packed_adhoc_configs)

    -- restore_wifi_config()

    -- execute("wifi down; wifi up;")

    all_configs = unpack_table({all_11s_configs, all_adhoc_configs})

    -- apply config

    if (#all_configs > 0) then
        print("going over "..#all_configs.." configs.")
        for k, config in ipairs(all_configs) do
            print("testing "..config)
            if (are_files_different('/etc/config/lime-defaults', config)) then
                print(config)

                print('apply config: '..config)
                apply_config(config)
            else
                print("Config "..config.." is same as mine. Will try with the next one.")
            end
        end
    else
        print("no config found")
    end
end

print("[FBW] start.")
if file_exists("/var/lock/first_run") then
    print("[FBW] Lock exists, first run running")
    first_run()
else
    print("[FBW] Lock doesn't exist. To run recreate empty file /var/lock/first_run.")
end
