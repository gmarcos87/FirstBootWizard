#!/usr/bin/env lua

require "ubus"
local json = require 'luci.json'
local fbw = require 'firstbootwizard'

local function print_json(obj)
    print(json.encode(obj))
end

local conn = ubus.connect()
if not conn then
    error("Failed to connect to ubus")
end

local function get_configs()
    print_json({ networks = read_configs() })
end

local function search_networks(msg)
    -- print_json(fbw.get_all_networks())
    print_json({ scanning = true })
end

local function join_network(network_name)
    fbw.apply_config(network_name)
    return {network=network_name}
end

local function create_network(network_spec)
    return "create_network"..network_spec.name
end

local methods = {
    search_networks = { no_params = 0 },
    get_configs = { no_params = 0 },
    join_network = { network_name = 'value' },
    create_network = { network_spec = 'object' },
}

if arg[1] == 'list' then
    print_json(methods)
end

if arg[1] == 'call' then
    local msg = io.read()
    msg = json.decode(msg)
    if arg[2] == 'search_networks' then search_networks(msg)
    elseif arg[2] == 'get_configs' then get_configs()
    -- elseif arg[2] == 'join_network' then join_network(msg.network_name)
    -- elseif arg[2] == 'create_network' then create_network(msg.network_spec)
    else print_json({ error = "Method not found" })
    end
end
